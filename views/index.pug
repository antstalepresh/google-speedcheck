doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes')
    link(rel='icon', type='image/png', href='https://www.google.com/images/icons/product/pagespeed-64.png')
    title SEO quickscan
    link(rel='stylesheet', href='https://code.getmdl.io/1.2.1/material.indigo-pink.min.css')
    style
      include main.css
    script(defer, src='https://code.getmdl.io/1.2.1/material.min.js')
  body
    h1 #{t('appTitle')}
    form#form(method='get', action='./slides')
      div
        p
          span.mdl-radio URL to Analyze <small>(including <code>https://</code> or <code>http://</code>)</small>
        p
          input#url.mdl-textfield__input(name='url', type='url', required, placeholder='https://www.google.com/')
      div
        details
          summary More options
          div
            p
              label.mdl-radio.mdl-js-radio.mdl-js-ripple-effect(for='strategyMobile')
                input#strategyMobile.mdl-radio__button(name='strategy', type='radio', value='mobile', checked)
                span.mdl-radio__label Mobile Site
            p
              label.mdl-radio.mdl-js-radio.mdl-js-ripple-effect(for='strategyDesktop')
                input#strategyDesktop.mdl-radio__button(name='strategy', type='radio', value='desktop')
                span.mdl-radio__label Desktop Site
            p#mobileFriendlyParagraph
              label.mdl-checkbox.mdl-js-checkbox.mdl-js-ripple-effect(for='mobileFriendlyTest')
                input#mobileFriendlyTest.mdl-checkbox__input(name='mobileFriendlyTest', type='checkbox', checked=false, value='true')
                span.mdl-checkbox__label Run a Mobile-Friendly Test
          div
            label.mdl-checkbox.mdl-js-checkbox.mdl-js-ripple-effect(for='screenshot')
              input#screenshot.mdl-checkbox__input(name='screenshot', type='checkbox', checked, value='true')
              span.mdl-checkbox__label Include a Screenshot
          div
            label.mdl-checkbox.mdl-js-checkbox.mdl-js-ripple-effect(for='filterThirdPartyResources')
              input#filterThirdPartyResources.mdl-checkbox__input(name='filterThirdPartyResources', type='checkbox', checked=false, value='true')
              span.mdl-checkbox__label Filter 3<sup>rd</sup>-Party Resources&nbsp;
                small (e.g., most tracking pixels)
          div
            select#locale.mdc-select(name='locale')
              option(value='ar') üá∏üá¶ Arabic
              option(value='bg') üáßüá¨ Bulgarian
              option(value='ca') üè≥ Catalan
              option(value='zh-TW') üáπüáº Traditional Chinese (Taiwan)
              option(value='zh-CN') üá®üá≥ Simplified Chinese
              option(value='hr') üá≠üá∑ Croatian
              option(value='cs') üá®üáø Czech
              option(value='da') üá©üá∞ Danish
              option(value='nl') üá≥üá± Dutch
              option(value='en', selected) üá∫üá∏ English
              option(value='en-AU') üèÑüèΩ‚Äç‚ôÄÔ∏è English AU
              option(value='en-GB') üá¨üáß English UK
              option(value='fil') üáµüá≠ Filipino
              option(value='fi') üá´üáÆ Finnish
              option(value='fr') üá´üá∑ French
              option(value='de') üá©üá™ German
              option(value='el') üá¨üá∑ Greek
              option(value='iw') üáÆüá± Hebrew
              option(value='hi') üáÆüá≥ Hindi
              option(value='hu') üá≠üá∫ Hungarian
              option(value='id') üáÆüá© Indonesian
              option(value='it') üáÆüáπ Italian
              option(value='ja') üáØüáµ Japanese
              option(value='ko') üá∞üá∑ Korean
              option(value='lv') üá±üáª Latvian
              option(value='lt') üá±üáπ Lithuanian
              option(value='no') üá≥üá¥ Norwegian
              option(value='pl') üáµüá± Polish
              option(value='pt-BR') üáßüá∑ Portuguese (Brazilian)
              option(value='pt-PT') üáµüáπ Portuguese (Portugal)
              option(value='ro') üá∑üá¥ Romanian
              option(value='ru') üá∑üá∫ Russian
              option(value='sr') üá∑üá∏ Serbian
              option(value='sk') üá∏üá∞ Slovakian
              option(value='sl') üá∏üáÆ Slovenian
              option(value='es') üá™üá∏ Spanish
              option(value='sv') üá∏üá™ Swedish
              option(value='th') üáπüá≠ Thai
              option(value='tr') üáπüá∑ Turkish
              option(value='uk') üá∫üá¶ Ukrainian
              option(value='vi') üáªüá≥ Vietnamese
      div
        button#viewButton.mdl-button.mdl-js-button.mdl-button--raised.mdl-js-ripple-effect.mdl-button--accent(type='submit') üëÄ&nbsp;&nbsp;View Slides
        button#downloadButton.mdl-button.mdl-js-button.mdl-button--raised.mdl-js-ripple-effect.mdl-button--accent(type='submit') üìÇ&nbsp;&nbsp;Download Slides
        a#downloadLink.hidden(download, href='')
    img(src='https://goo.gl/b8G7DH',alt='',height='0',width='0')
    script.
      const downloadLink = document.querySelector('#downloadLink');
      const viewButton = document.querySelector('#viewButton');
      const downloadButton = document.querySelector('#downloadButton');
      const urlInput = document.querySelector('#url');
      const formElement = document.querySelector('#form');
      const mobileSiteRadio = document.querySelector('#strategyMobile');
      const desktopSiteRadio = document.querySelector('#strategyDesktop');
      const mobileFriendlyParagraph = document.querySelector('#mobileFriendlyParagraph');

      const strategyChanged = () => {
        if (mobileSiteRadio.checked) {
          mobileFriendlyParagraph.style.visibility = 'visible';
        } else {
          mobileFriendlyParagraph.style.visibility = 'hidden';
        }
      };
      mobileSiteRadio.addEventListener('change', strategyChanged);
      desktopSiteRadio.addEventListener('change', strategyChanged);
      strategyChanged();

      viewButton.addEventListener('click', () => {
        if (!formElement.checkValidity()) {
          return;
        }
        viewButton.innerHTML = '<span class="loading">‚è≥</span>&nbsp;&nbsp;Preparing Slides‚Ä¶';
        formElement.submit();
      });

      downloadButton.addEventListener('click', clickEvent => {
        if (!formElement.checkValidity()) {
          return;
        }
        clickEvent.preventDefault();
        let queryString = [];
        for (const formField of formElement.querySelectorAll('input,select')) {
          if (formField.nodeName === 'INPUT') {
            if (formField.type === 'checkbox' || formField.type === 'radio') {
              if (formField.checked) {
                queryString.push(`${formField.name}=${encodeURIComponent(formField.value)}`);
              }
            } else {
              queryString.push(`${formField.name}=${encodeURIComponent(formField.value)}`);
            }
          } else if (formField.nodeName === 'SELECT') {
            queryString.push(`${formField.name}=${encodeURIComponent(formField.value)}`);
          }
        }
        queryString = queryString.join('&');
        downloadLink.href = `${formElement.action}?${queryString}`;
        const url = new URL(urlInput.value);
        downloadLink.download = `pagespeed_inslides_-_${
            url.hostname.replace(/\./g, '_')}${
            url.pathname.length > 1 ? url.pathname.replace(/[\/\.]/g, '-') : ''
            }.html`;
        const defaultText = downloadButton.textContent;
        downloadButton.innerHTML = '<span class="loading">‚è≥</span>&nbsp;&nbsp;Preparing Slides‚Ä¶';
        setTimeout(() => {
          downloadButton.textContent = defaultText;
        }, 30000);
        downloadLink.click();
      });
